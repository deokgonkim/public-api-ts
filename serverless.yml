service: public-api-ts
frameworkVersion: "3"
useDotenv: true

provider:
  name: aws
  runtime: nodejs18.x
  region: ${env:AWS_REGION}
  stage: ${opt:stage, "dev"}
  # The S3 prefix under which deployed artifacts are stored (default: serverless)
  # deploymentPrefix: serverless
  # Configure the S3 bucket used by Serverless Framework to deploy code packages to Lambda
  deploymentBucket:
    # Name of an existing bucket to use (default: created by serverless)
    name: ${env:DEPLOYMENT_BUCKET}
    # On deployment, serverless prunes artifacts older than this limit (default: 5)
    maxPreviousDeploymentArtifacts: 5
    # Prevents public access via ACLs or bucket policies (default: false)
    # Note: the deployment bucket is not public by default. These are additional ACLs.
    blockPublicAccess: true
    # Skip the creation of a default bucket policy when the deployment bucket is created (default: false)
    # skipPolicySetup: true
    # Enable bucket versioning (default: false)
    # versioning: true
    # Server-side encryption method
    serverSideEncryption: AES256
    # For server-side encryption
    # sseKMSKeyId: arn:aws:kms:us-east-1:xxxxxxxxxxxx:key/aaaaaaaa-aaaa-aaaa-aaaa-aaaaaaaaaaaa
    # For server-side encryption with custom keys
    # sseCustomerAlgorithim: AES256
    # sseCustomerKey: string
    # sseCustomerKeyMD5: md5sum
  tracing:
    lambda: true
    apiGateway: true
  # httpApi:
  #   cors:
  #     allowedOrigins:
  #       - http://localhost
  #       - http://localhost:8080
  #       - ${env:CORS_ORIGIN}
  #     allowedHeaders:
  #       - Content-Type
  #       - X-Amz-Date
  #       - Authorization
  #       - X-Api-Key
  #       - X-Amz-Security-Token
  #       - X-Amz-User-Agent
  #     allowedMethods:
  #       - GET
  #       - POST
  #       - PUT
  #       - DELETE
  #     allowCredentials: true
  #     # exposedResponseHeaders:
  #     #   - Special-Response-Header
  #     maxAge: 6000 # In seconds
  iam:
    deploymentRole: "arn:aws:iam::${aws:accountId}:role/public-api-ts-role-CloudFormationExecutionRole"
    role:
      statements:
        - Effect: "Allow"
          Resource: "*"
          Action: "s3:*"
        # Allow functions to list all buckets
        - Effect: Allow
          Action: "dynamodb:*"
          # Resource: 'arn:aws:dynamodb:::table/TemperatureTable-${self:provider.stage}'
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/*"
        - Effect: Allow
          Action: "apigateway:*"
          Resource: "arn:aws:apigateway:ap-northeast-2::/*"
  timeout: 25 # optional, in seconds, default is 6, API Gateway timeout is 30 seconds
  environment:
    AWS_REGION: ${env:AWS_REGION}
    AWS_DEFAULT_USAGE_PLAN_ID: ${env:AWS_DEFAULT_USAGE_PLAN_ID}
    COGNITO_USER_POOL_ID: ${env:COGNITO_USER_POOL_ID}
    README_SECRET: ${env:README_SECRET}

plugins:
  - serverless-domain-manager
  - serverless-plugin-typescript

custom:
  customDomain:
    rest:
      domainName: ${env:DOMAIN_NAME}
      stage: ${self:provider.stage}
      basePath: "v1"
      certificateName: ${env:CERTIFICATE_NAME}
      createRoute53Record: true
      createRoute53IPv6Record: true
      endpointType: "regional"
      securityPolicy: tls_1_2

functions:
  list:
    handler: handler.list
    events:
      - http:
          path: /temperatures/
          method: get
          private: true
  create:
    handler: handler.insert
    events:
      - http:
          path: /temperatures/
          method: post
          private: true

  registerFcmToken:
    handler: fcmhandler.registerFcmToken
    events:
      - http:
          path: /fcm-tokens/
          method: post
          cors: true

  readme:
    handler: readme.handler
    events:
      - http:
          path: /readme/hook
          method: post

  trial:
    handler: trial.handler
    events:
      - http:
          path: /trial
          method: get

  hello:
    handler: hello.handler
    events:
      - http:
          path: /hello
          method: get
          private: true

  shopApi:
    handler: src/shop/index.handler
    events:
      - httpApi: "*"

resources: # CloudFormation template syntax from here on.
  Resources:
    TemperatureTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:APP_ID}-TemperatureTable-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: datetime
            AttributeType: S
        KeySchema:
          - AttributeName: datetime
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # ProvisionedThroughput:
        #   ReadCapacityUnits: 1
        #   WriteCapacityUnits: 1
    FcmTokenTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${env:APP_ID}-FcmTokens-${self:provider.stage}
        AttributeDefinitions:
          - AttributeName: fcmToken
            AttributeType: S
        KeySchema:
          - AttributeName: fcmToken
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        # ProvisionedThroughput:
        #   ReadCapacityUnits: 1
        #   WriteCapacityUnits: 1
